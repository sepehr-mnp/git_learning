http: read only access to repo
https/ssh: provide authenticate users for writng on repo

$ git remote -v
origin  https://github.com/sepehr-mnp/serkleTrie.git (fetch)
origin  https://github.com/sepehr-mnp/serkleTrie.git (push)

$ git remote show origin
* remote origin
  Fetch URL: https://github.com/sepehr-mnp/serkleTrie.git
  Push  URL: https://github.com/sepehr-mnp/serkleTrie.git
  HEAD branch: main
  Remote branch:
    main tracked
  Local branch configured for 'git pull':
    main merges with remote main
  Local ref configured for 'git push':
    main pushes to main (up to date)

$ git branch -r
  origin/HEAD -> origin/main
  origin/main

# Whenever we're operating with remotes, Git uses remote branches to keep copies of the data that's stored in the remote repository. We could have a look at the remote branches that our Git repo is currently tracking by running git branch -r.
These branches are read only. We can look at the commit history, like we would with local branches, but we can't make any changes to them directly. To modify their contents, we'll have to go through the workflow we called out before.

# First, we pull any new changes to our local branch, then merge them with our changes and push our changes to the repo.

$ git remote update
 we got the contents of the experimental bunch together with those of the master branch when we called git pull, which also merged new changes onto the master branch. If we want to get the contents of remote branches without automatically merging any contents into the local branches, we can call git remote update. This will fetch the contents of all remote branches, so that we can just call checkout or merge as needed.